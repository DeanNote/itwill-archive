/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-11-27 02:41:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class member_005fjoin_005fform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<!-- 외부 CSS 파일(css/default.css) 연결하기 -->\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/default.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<!-- 다음 주소검색 API 사용을 위한 라이브러리 추가 -->\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	window.onload = function() {\r\n");
      out.write("		let isSamePasswd = false; // 패스워드 일치 여부 저장할 변수\r\n");
      out.write("		\r\n");
      out.write("		// 1. ID 중복확인 버튼 클릭 시 새 창(check_id.html) 띄우기\r\n");
      out.write("		document.querySelector(\"#btnCheckId\").onclick = function() {\r\n");
      out.write("			window.open(\"check_id.jsp\", \"id_check\", \"width=300,height=300\");\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// 2. 아이디 입력란에서 커서가 빠져나갈 때 아이디 길이 체크하기 => blur\r\n");
      out.write("		document.joinForm.id.onblur = function() {\r\n");
      out.write("			let id = document.joinForm.id.value; // 입력받은 아이디값 저장\r\n");
      out.write("			\r\n");
      out.write("			// 입력된 ID 텍스트의 길이가 4 ~ 8글자 사이일 경우 \r\n");
      out.write("			// 우측 빈공간(span 태그 영역)에 \"사용 가능\" 초록색으로 표시\r\n");
      out.write("		    // 아니면, \"4~8글자만 사용 가능합니다\" 빨간색으로 표시\r\n");
      out.write("		    if(id.length >= 4 && id.length <= 8) {\r\n");
      out.write("		     	document.querySelector(\"#checkIdResult\").innerText = \"사용 가능\";\r\n");
      out.write("		     	document.querySelector(\"#checkIdResult\").style.color = \"green\";\r\n");
      out.write("		    } else {\r\n");
      out.write("		     	document.querySelector(\"#checkIdResult\").innerText = \"4~8글자만 사용 가능합니다\";\r\n");
      out.write("		     	document.querySelector(\"#checkIdResult\").style.color = \"red\";\r\n");
      out.write("		    }\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// 3. 비밀번호 입력란에 키를 누를때마다 비밀번호 길이 체크하기 = keyup\r\n");
      out.write("		document.joinForm.passwd.onkeyup = function() {\r\n");
      out.write("			let passwd = document.joinForm.passwd.value;\r\n");
      out.write("			\r\n");
      out.write("			// 비밀번호 길이 체크를 통해 8 ~ 16글자 사이이면 \"사용 가능한 패스워드\"(파란색) 표시,\r\n");
      out.write("			// 아니면, \"사용 불가능한 패스워드\"(빨간색) 표시\r\n");
      out.write("		    if(passwd.length >= 8 && passwd.length <= 16) {\r\n");
      out.write("		     	document.querySelector(\"#checkPasswdResult\").innerText = \"사용 가능한 패스워드\";\r\n");
      out.write("		     	document.querySelector(\"#checkPasswdResult\").style.color = \"blue\";\r\n");
      out.write("		    } else {\r\n");
      out.write("		     	document.querySelector(\"#checkPasswdResult\").innerText = \"사용 불가능한 패스워드\";\r\n");
      out.write("		     	document.querySelector(\"#checkPasswdResult\").style.color = \"red\";\r\n");
      out.write("		    }\r\n");
      out.write("			\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// 4. 비밀번호확인 입력란에 키를 누를때마다 비밀번호와 같은지 체크하기\r\n");
      out.write("		document.joinForm.passwd2.onkeyup = function() {\r\n");
      out.write("			let passwd = document.joinForm.passwd.value;\r\n");
      out.write("			let passwd2 = document.joinForm.passwd2.value;\r\n");
      out.write("			\r\n");
      out.write("			// 비밀번호와 비밀번호확인 입력 내용이 같으면 \"비밀번호 일치\"(파란색) 표시,\r\n");
      out.write("   			// 아니면, \"비밀번호 불일치\"(빨간색) 표시\r\n");
      out.write("		    if(passwd == passwd2) { // 일치\r\n");
      out.write("		     	document.querySelector(\"#checkPasswd2Result\").innerText = \"비밀번호 일치\";\r\n");
      out.write("		     	document.querySelector(\"#checkPasswd2Result\").style.color = \"blue\";\r\n");
      out.write("		     	// 일치 여부를 저장하는 변수 isSamePasswd 값을 true 로 변경\r\n");
      out.write("		     	isSamePasswd = true;\r\n");
      out.write("		    } else { // 불일치\r\n");
      out.write("		     	document.querySelector(\"#checkPasswd2Result\").innerText = \"비밀번호 불일치\";\r\n");
      out.write("		     	document.querySelector(\"#checkPasswd2Result\").style.color = \"red\";\r\n");
      out.write("		     	// 일치 여부를 저장하는 변수 isSamePasswd 값을 true 로 변경\r\n");
      out.write("		     	isSamePasswd = false;\r\n");
      out.write("		    }\r\n");
      out.write("			\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// 5. 주민번호 숫자 입력할때마다 길이 체크하기\r\n");
      out.write("		// => 주민번호 앞자리 입력란에 입력된 숫자가 6자리이면 뒷자리 입력란으로 커서 이동시키기\r\n");
      out.write("		// => 주민번호 뒷자리 입력란에 입력된 숫자가 7자리이면 뒷자리 입력란에서 커서 제거하기\r\n");
      out.write("		document.joinForm.jumin1.onkeyup = function() {\r\n");
      out.write("		    if(document.joinForm.jumin1.value.length == 6) {\r\n");
      out.write("		    	document.joinForm.jumin2.focus();\r\n");
      out.write("		    }\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		document.joinForm.jumin2.onkeyup = function() {\r\n");
      out.write("		    if(document.joinForm.jumin2.value.length == 7) {\r\n");
      out.write("		    	document.joinForm.jumin2.blur();\r\n");
      out.write("		    }\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// 6. 이메일 도메인 선택 셀렉트 박스 항목 변경 시 = change\r\n");
      out.write("		//    선택된 셀렉트 박스 값을 이메일 두번째 항목(@ 기호 뒤)에 표시하기\r\n");
      out.write("		document.joinForm.emailDomain.onchange = function() {\r\n");
      out.write("			document.joinForm.email2.value = document.joinForm.emailDomain.value;\r\n");
      out.write("			\r\n");
      out.write("			// 단, 직접입력 선택 시 표시된 도메인 삭제하기\r\n");
      out.write("		    // 또한, \"직접입력\" 항목 외의 도메인 선택 시 도메인 입력창을 잠금처리 및 회색으로 변경하고,\r\n");
      out.write("		    // \"직접입력\" 항목 선택 시 도메인 입력창에 커서 요청 및 잠금 해제\r\n");
      out.write("		    if(document.joinForm.emailDomain.value == \"\") { // 직접 입력 선택 시\r\n");
      out.write("		    	document.joinForm.email2.focus(); // 포커스 요청\r\n");
      out.write("		    	document.joinForm.email2.readOnly = false; // 입력창 잠금 해제(readonly 아님!)\r\n");
      out.write("		    	document.joinForm.email2.style.background = \"\";\r\n");
      out.write("		    } else { // 도메인 선택 시\r\n");
      out.write("		    	document.joinForm.email2.readOnly = true; // 입력창 잠금 해제\r\n");
      out.write("		    	document.joinForm.email2.style.background = \"lightgray\";\r\n");
      out.write("		    }\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// 7. 취미의 \"전체선택\" 체크박스 체크 시 취미 항목 모두 체크, \r\n");
      out.write("		//    \"전체선택\" 해제 시 취미 항목 모두 체크 해제하기\r\n");
      out.write("		document.querySelector(\"#checkAllHobby\").onclick = function() {\r\n");
      out.write("			for(let i = 0; i < document.joinForm.hobby.length; i++) {\r\n");
      out.write("				document.joinForm.hobby[i].checked = document.querySelector(\"#checkAllHobby\").checked;\r\n");
      out.write("			}\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// 8. 가입(submit) 클릭 시 이벤트 처리를 통해\r\n");
      out.write("	    // 비밀번호 2개가 일치하는지 체크하고 모든 항목이 입력되었을 경우에만 submit 동작이 수행되도록 처리\r\n");
      out.write("		document.joinForm.onsubmit = function() {\r\n");
      out.write("			if(!isSamePasswd) { // 일치 여부 저장 변수 isSamePasswd 값 활용\r\n");
      out.write("				alert(\"패스워드 불일치!\");\r\n");
      out.write("				document.joinForm.passwd2.focus();\r\n");
      out.write("				return false; // submit 동작 취소\r\n");
      out.write("// 			} else if(!document.joinForm.hobby[0].checked && !document.joinForm.hobby[1].checked && !document.joinForm.hobby[2].checked) {\r\n");
      out.write("// 				// 취미는 모든 체크박스 체크상태가 false 일 때 체크 요청 메세지 출력\r\n");
      out.write("// 				alert(\"취미 선택 필수!\");\r\n");
      out.write("// 				return false; // submit 동작 취소\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			return true; // submit 동작 수행(생략 가능)\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// =====================================================================\r\n");
      out.write("		// 주소 검색 API 활용 기능 추가\r\n");
      out.write("		// \"t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\" 스크립트 파일 로딩 필수!\r\n");
      out.write("		document.querySelector(\"#btnSearchAddress\").onclick = function() {\r\n");
      out.write("			new daum.Postcode({\r\n");
      out.write("				// 주소검색 창에서 주소 검색 후 검색된 주소를 클릭하면\r\n");
      out.write("				// oncomplete: 뒤의 익명함수가 실행(호출)됨 => callback(콜백) 함수라고 함\r\n");
      out.write("		        oncomplete: function(data) {\r\n");
      out.write("		        	// 클릭(선택)된 주소에 대한 정보(객체)가 익명함수 파라미터 data 에 전달됨\r\n");
      out.write("					// => data.xxx 형식으로 각 주소 정보에 접근\r\n");
      out.write("					// 1) 우편번호(zonecode) 가져와서 우편번호 항목(postCode)에 출력\r\n");
      out.write("					document.joinForm.postCode.value = data.zonecode; \r\n");
      out.write("					\r\n");
      out.write("					// 2) 기본주소(address) 가져와서 기본주소 항목(address1)에 출력\r\n");
      out.write("// 					document.joinForm.address1.value = data.address;\r\n");
      out.write("					let address = data.address;\r\n");
      out.write("					\r\n");
      out.write("					// 만약, 건물명(buildingName)이 존재(널스트링이 아님)할 경우\r\n");
      out.write("					// 기본주소 뒤에 건물명을 결합\r\n");
      out.write("					if(data.buildingName != \"\") {\r\n");
      out.write("						address += \" (\" + data.buildingName + \")\";\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("					document.joinForm.address1.value = address;\r\n");
      out.write("					\r\n");
      out.write("					// 3) 상세주소 항목(address2)에 포커스(커서) 요청\r\n");
      out.write("					document.joinForm.address2.focus();\r\n");
      out.write("		        }\r\n");
      out.write("		    }).open();\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("	}; // window.onload 이벤트 끝\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<header>\r\n");
      out.write("		<!-- inc/top.jsp 페이지 삽입 -->\r\n");
      out.write("		<!-- JSP 파일 삽입 대상은 현재 파일을 기준으로 상대주소 지정 -->\r\n");
      out.write("		<!-- webapp 디렉토리를 가리키려면 최상위(루트) 경로 활용 -->\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../inc/top.jsp", out, false);
      out.write("\r\n");
      out.write("	</header>\r\n");
      out.write("	<article>\r\n");
      out.write("		<h1>회원 가입</h1>\r\n");
      out.write("		<form action=\"MemberJoinPro\" method=\"post\" name=\"joinForm\">\r\n");
      out.write("			<table border=\"1\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>이름</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"name\" required></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>아이디</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" name=\"id\" placeholder=\"8 ~ 16글자\" required>\r\n");
      out.write("						<input type=\"button\" value=\"ID중복확인\" id=\"btnCheckId\" onclick=\"checkId()\">\r\n");
      out.write("						<span id=\"checkIdResult\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>비밀번호</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"password\" name=\"passwd\" placeholder=\"8 ~ 16글자\" required>\r\n");
      out.write("						<span id=\"checkPasswdResult\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>비밀번호확인</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"password\" name=\"passwd2\" required>\r\n");
      out.write("						<span id=\"checkPasswd2Result\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>주민번호</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<!-- 입력 문자 갯수 제한 시 maxLength 속성 지정 -->\r\n");
      out.write("						<input type=\"text\" name=\"jumin1\" size=\"8\" maxlength=\"6\" required> -\r\n");
      out.write("						<input type=\"text\" name=\"jumin2\" size=\"8\" maxlength=\"7\" required>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>주소</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" name=\"postCode\" id=\"postCode\" size=\"6\" required>\r\n");
      out.write("						<input type=\"button\" id=\"btnSearchAddress\" value=\"주소검색\">\r\n");
      out.write("						<br>\r\n");
      out.write("						<input type=\"text\" name=\"address1\" id=\"address1\" size=\"25\" placeholder=\"기본주소\" required>\r\n");
      out.write("						<br>\r\n");
      out.write("						<input type=\"text\" name=\"address2\" id=\"address2\" size=\"25\" placeholder=\"상세주소\" required>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>E-Mail</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" name=\"email1\" size=\"8\" required> @\r\n");
      out.write("						<input type=\"text\" name=\"email2\" size=\"8\" required>\r\n");
      out.write("						<select name=\"emailDomain\">\r\n");
      out.write("							<option value=\"\">직접입력</option>\r\n");
      out.write("							<option value=\"naver.com\">naver.com</option>\r\n");
      out.write("							<option value=\"gmail.com\">gmail.com</option>\r\n");
      out.write("							<option value=\"nate.com\">nate.com</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>직업</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<select name=\"job\" required>\r\n");
      out.write("							<option value=\"\">항목을 선택하세요</option>\r\n");
      out.write("							<option value=\"개발자\">개발자</option>\r\n");
      out.write("							<option value=\"DB엔지니어\">DB엔지니어</option>\r\n");
      out.write("							<option value=\"서버엔지니어\">서버엔지니어</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>성별</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"radio\" name=\"gender\" value=\"남\" required>남\r\n");
      out.write("						<input type=\"radio\" name=\"gender\" value=\"여\" required>여\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>취미</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"checkbox\" name=\"hobby\" value=\"여행\">여행\r\n");
      out.write("						<input type=\"checkbox\" name=\"hobby\" value=\"독서\">독서\r\n");
      out.write("						<input type=\"checkbox\" name=\"hobby\" value=\"게임\">게임\r\n");
      out.write("						<input type=\"checkbox\" id=\"checkAllHobby\" value=\"전체선택\">전체선택\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>가입동기</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<textarea rows=\"5\" cols=\"40\" name=\"motivation\" required></textarea>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\" align=\"center\">\r\n");
      out.write("						<input type=\"submit\" value=\"가입\">\r\n");
      out.write("						<input type=\"reset\" value=\"초기화\">\r\n");
      out.write("						<input type=\"button\" value=\"돌아가기\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("	</article>\r\n");
      out.write("	<footer>\r\n");
      out.write("	\r\n");
      out.write("	</footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
